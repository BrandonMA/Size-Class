{"version":3,"file":"index.modern.js","sources":["../src/index.tsx"],"sourcesContent":["import { useState, useLayoutEffect } from 'react';\nimport { Platform } from 'react-native';\nimport { useResponsiveWidth, useResponsiveHeight } from 'react-native-responsive-dimensions';\nimport { getDeviceTypeAsync, DeviceType, osName } from 'expo-device';\n\nexport enum WidthSize {\n    compactPhone = 375, // iPhone 11 Pro\n    largePhone = 667, // iPhone 7 Landscape\n    compactTablet = 592, // iPad Pro 11 2/4\n    largeTablet = 768, // iPad normal Width\n    extraLargeTablet = 1366, // iPad Pro 12.9 full screen\n    compactDesktop = 592, // iPad Pro 11 2/4 (Chrome)\n    largeDesktop = 826, // Macbook Pro 13' 3/4 (Chrome)\n    extraLargeDesktop = 1680 // Macbook Pro 13' Max dynamic resolution\n}\n\nexport enum HeightSize {\n    compactPhone = 667, // iPhone 7 Height\n    largePhone = 812, // iPhone X Height\n    compactTablet = 768, // iPad Standard Height\n    largeTablet = 834, // iPad Pro 11 Height\n    extraLargeTablet = 1024, // iPad Pro 12.9 Height\n    compactDesktop = 597, // iPad Pro 11 2/4 (Chrome)\n    largeDesktop = 775, // Macbook Pro 13' 3/4 (Chrome)\n    extraLargeDesktop = 1050 // Macbook Pro 13' Max dynamic resolution\n}\n\nexport enum Size {\n    compact = 'compact',\n    medium = 'medium',\n    large = 'large',\n    extraLarge = 'extraLarge'\n}\n\nexport function getStringNameFromDeviceTypeEnum(type: DeviceType): 'unknown' | 'phone' | 'tablet' | 'desktop' | 'tv' {\n    switch (type) {\n        case 1:\n            return 'phone';\n        case 2:\n            return 'tablet';\n        case 3:\n            return 'desktop';\n        case 4:\n            return 'tv';\n        default:\n            return 'unknown';\n    }\n}\n\n// Interace to use styled components easier\nexport interface StyledComponentSizeClassProps {\n    widthSizeClass: WidthSize;\n    heightSizeClass: HeightSize;\n}\n\nfunction isDesktop(): boolean {\n    return osName !== 'iOS' && osName !== 'Android' && (Platform.OS === 'web' || Platform.OS === 'windows' || Platform.OS === 'macos');\n}\n\nexport function useWidthSizeClass(): [Size, DeviceType] | null {\n    const [type, setType] = useState<DeviceType | null>(null);\n    const width = useResponsiveWidth(100);\n\n    useLayoutEffect(() => {\n        getDeviceTypeAsync()\n            .then((type) => {\n                return setType(type);\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }, []);\n\n    if (type != null) {\n        if (isDesktop()) {\n            if (width >= WidthSize.extraLargeDesktop) {\n                return [Size.extraLarge, type];\n            } else if (width >= WidthSize.largeDesktop) {\n                return [Size.large, type];\n            } else if (width >= WidthSize.compactDesktop) {\n                return [Size.medium, type];\n            } else {\n                return [Size.compact, type];\n            }\n        } else {\n            if (type === DeviceType.TABLET) {\n                if (width >= WidthSize.extraLargeTablet) {\n                    // Show a bigger iPad UI for the biggest one\n                    return [Size.extraLarge, type];\n                } else if (width >= WidthSize.largeTablet) {\n                    // Show the ideal iPad UI\n                    return [Size.large, type];\n                } else if (width >= WidthSize.compactTablet) {\n                    // Show a slightly reduced interface\n                    return [Size.medium, type];\n                } else {\n                    // Show a phone interface\n                    return [Size.compact, type];\n                }\n            } else {\n                if (width >= WidthSize.largePhone) {\n                    // Landscape, you can show more content\n                    return [Size.medium, type];\n                } else {\n                    // Normal phone interface\n                    return [Size.compact, type];\n                }\n            }\n        }\n    }\n    return null;\n}\n\nexport function useHeightSizeClass(): [Size, DeviceType] | null {\n    const [type, setType] = useState<DeviceType | null>(null);\n    const height = useResponsiveHeight(100);\n\n    useLayoutEffect(() => {\n        getDeviceTypeAsync()\n            .then((type) => {\n                return setType(type);\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }, []);\n\n    if (type != null) {\n        if (isDesktop()) {\n            if (height >= HeightSize.extraLargeDesktop) {\n                return [Size.extraLarge, type];\n            } else if (height >= HeightSize.largeDesktop) {\n                return [Size.large, type];\n            } else if (height >= HeightSize.compactDesktop) {\n                return [Size.medium, type];\n            } else {\n                return [Size.compact, type];\n            }\n        } else {\n            if (type === DeviceType.TABLET) {\n                console.log(height);\n                if (height >= HeightSize.extraLargeTablet) {\n                    // Show a bigger iPad UI for the biggest one\n                    return [Size.extraLarge, type];\n                } else if (height >= HeightSize.largeTablet) {\n                    // Show the ideal iPad UI\n                    return [Size.large, type];\n                } else if (height >= HeightSize.compactTablet) {\n                    // Show a slightly reduced interface\n                    return [Size.medium, type];\n                } else {\n                    // Show a phone interface\n                    return [Size.compact, type];\n                }\n            } else {\n                if (height >= HeightSize.largePhone) {\n                    // Landscape, you can show more content\n                    return [Size.medium, type];\n                } else {\n                    // Normal phone interface\n                    return [Size.compact, type];\n                }\n            }\n        }\n    }\n    return null;\n}\n"],"names":["WidthSize","HeightSize","Size","getStringNameFromDeviceTypeEnum","type","isDesktop","osName","Platform","OS","useWidthSizeClass","useState","setType","width","useResponsiveWidth","useLayoutEffect","getDeviceTypeAsync","then","error","console","log","extraLargeDesktop","extraLarge","largeDesktop","large","compactDesktop","medium","compact","DeviceType","TABLET","extraLargeTablet","largeTablet","compactTablet","largePhone","useHeightSizeClass","height","useResponsiveHeight"],"mappings":"4QAKYA,IAAAA,EAWAC,EAWAC,WAOIC,EAAgCC,GAC5C,OAAQA,GACJ,OACI,MAAO,QACX,OACI,MAAO,SACX,OACI,MAAO,UACX,OACI,MAAO,KACX,QACI,MAAO,WAUnB,SAASC,IACL,MAAkB,QAAXC,GAA+B,YAAXA,IAAyC,QAAhBC,EAASC,IAAgC,YAAhBD,EAASC,IAAoC,UAAhBD,EAASC,aAGvGC,UACYC,EAA4B,MAA7CN,OAAMO,OACPC,EAAQC,EAAmB,KAYjC,OAVAC,EAAgB,WACZC,IACKC,KAAK,SAACZ,GACH,OAAOO,EAAQP,WAEZ,SAACa,GACJC,QAAQC,IAAIF,MAErB,IAES,MAARb,EACIC,IACIO,GAASZ,EAAUoB,kBACZ,CAAClB,EAAKmB,WAAYjB,GAClBQ,GAASZ,EAAUsB,aACnB,CAACpB,EAAKqB,MAAOnB,GACbQ,GAASZ,EAAUwB,eACnB,CAACtB,EAAKuB,OAAQrB,GAEd,CAACF,EAAKwB,QAAStB,GAGtBA,IAASuB,EAAWC,OAChBhB,GAASZ,EAAU6B,iBAEZ,CAAC3B,EAAKmB,WAAYjB,GAClBQ,GAASZ,EAAU8B,YAEnB,CAAC5B,EAAKqB,MAAOnB,GACbQ,GAASZ,EAAU+B,cAEnB,CAAC7B,EAAKuB,OAAQrB,GAGd,CAACF,EAAKwB,QAAStB,GAGtBQ,GAASZ,EAAUgC,WAEZ,CAAC9B,EAAKuB,OAAQrB,GAGd,CAACF,EAAKwB,QAAStB,iBAQ1B6B,UACYvB,EAA4B,MAA7CN,OAAMO,OACPuB,EAASC,EAAoB,KAYnC,OAVArB,EAAgB,WACZC,IACKC,KAAK,SAACZ,GACH,OAAOO,EAAQP,WAEZ,SAACa,GACJC,QAAQC,IAAIF,MAErB,IAES,MAARb,EACIC,IACI6B,GAAUjC,EAAWmB,kBACd,CAAClB,EAAKmB,WAAYjB,GAClB8B,GAAUjC,EAAWqB,aACrB,CAACpB,EAAKqB,MAAOnB,GACb8B,GAAUjC,EAAWuB,eACrB,CAACtB,EAAKuB,OAAQrB,GAEd,CAACF,EAAKwB,QAAStB,GAGtBA,IAASuB,EAAWC,QACpBV,QAAQC,IAAIe,GACRA,GAAUjC,EAAW4B,iBAEd,CAAC3B,EAAKmB,WAAYjB,GAClB8B,GAAUjC,EAAW6B,YAErB,CAAC5B,EAAKqB,MAAOnB,GACb8B,GAAUjC,EAAW8B,cAErB,CAAC7B,EAAKuB,OAAQrB,GAGd,CAACF,EAAKwB,QAAStB,IAGtB8B,GAAUjC,EAAW+B,WAEd,CAAC9B,EAAKuB,OAAQrB,GAGd,CAACF,EAAKwB,QAAStB,SA3J1C,SAAYJ,GACRA,qCACAA,iCACAA,uCACAA,mCACAA,8CACAA,yCACAA,qCACAA,gDARJ,CAAYA,IAAAA,OAWZ,SAAYC,GACRA,qCACAA,iCACAA,uCACAA,mCACAA,8CACAA,yCACAA,qCACAA,gDARJ,CAAYA,IAAAA,OAWZ,SAAYC,GACRA,oBACAA,kBACAA,gBACAA,0BAJJ,CAAYA,IAAAA"}